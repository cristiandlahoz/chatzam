@startuml ChatZam_Sequence_Diagrams

skinparam backgroundColor #FEFEFE
skinparam sequence {
    ArrowColor DeepSkyBlue
    ActorBorderColor DeepSkyBlue
    LifeLineBorderColor blue
    LifeLineBackgroundColor #A7BBCC
    ParticipantBorderColor DeepSkyBlue
    ParticipantBackgroundColor DeepSkyBlue
    ParticipantFontSize 12
    ParticipantFontColor #000000
    ActorBackgroundColor aqua
    ActorFontColor DeepSkyBlue
    ActorFontSize 12
}

title ChatZam App - User Authentication Flow

participant "User" as User
participant "AuthFragment" as AuthUI
participant "AuthViewModel" as AuthVM
participant "AuthManager" as AuthMgr
participant "Firebase Auth" as FAuth
participant "UserRepository" as UserRepo
participant "Firestore" as FS
participant "PresenceManager" as Presence

User -> AuthUI: Enter credentials
AuthUI -> AuthVM: login(email, password)
AuthVM -> AuthMgr: loginUser(email, password)
AuthMgr -> FAuth: signInWithEmailAndPassword()

alt Successful Authentication
    FAuth --> AuthMgr: AuthResult
    AuthMgr -> UserRepo: getUserProfile(userId)
    UserRepo -> FS: getDocument("users", userId)
    FS --> UserRepo: UserProfile data
    UserRepo --> AuthMgr: UserProfile
    AuthMgr -> Presence: updateUserPresence(userId, true)
    Presence -> FS: updateDocument("presence", userId)
    AuthMgr --> AuthVM: Success(FirebaseUser)
    AuthVM --> AuthUI: LoginResult.Success
    AuthUI -> AuthUI: navigateToMainActivity()
else Authentication Failed
    FAuth --> AuthMgr: Exception
    AuthMgr --> AuthVM: Error(exception)
    AuthVM --> AuthUI: LoginResult.Error
    AuthUI -> AuthUI: showErrorMessage()
end

newpage Send Message Flow
title ChatZam App - Send Message Flow

participant "User" as User
participant "ChatFragment" as ChatUI
participant "MessageViewModel" as MsgVM
participant "MessageRepository" as MsgRepo
participant "EncryptionService" as Encrypt
participant "FirestoreService" as FSService
participant "Firestore" as FS
participant "FCMService" as FCM
participant "Recipient Device" as RecipientDevice

User -> ChatUI: Type message and press send
ChatUI -> MsgVM: sendMessage(content, chatId, TEXT)
MsgVM -> MsgRepo: sendMessage(message)

MsgRepo -> Encrypt: encryptMessage(content, recipientPublicKey)
Encrypt --> MsgRepo: encryptedContent

MsgRepo -> FSService: addDocument("messages", messageData)
FSService -> FS: add(messageData)
FS --> FSService: DocumentReference
FSService --> MsgRepo: messageId

note right: Parallel operations for efficiency

MsgRepo -> FSService: updateDocument("chats", chatId, lastMessageData)
FSService -> FS: update(chatId, lastMessageData)

MsgRepo -> FCM: sendNotificationToUser(recipientId, notificationData)
FCM -> RecipientDevice: Push Notification

FS -> RecipientDevice: Real-time message update
RecipientDevice -> RecipientDevice: Decrypt and display message

MsgRepo --> MsgVM: Success
MsgVM --> ChatUI: Message sent confirmation
ChatUI -> ChatUI: updateMessagesList()

newpage Group Chat Creation Flow
title ChatZam App - Group Chat Creation Flow

participant "User" as User
participant "GroupFragment" as GroupUI
participant "GroupViewModel" as GroupVM
participant "GroupManager" as GroupMgr
participant "ChatRepository" as ChatRepo
participant "UserRepository" as UserRepo
participant "Firestore" as FS
participant "FCMService" as FCM
participant "Group Members" as Members

User -> GroupUI: Enter group name and select members
GroupUI -> GroupVM: createGroup(name, description, memberIds)
GroupVM -> GroupMgr: createGroup(name, description, memberIds)

GroupMgr -> ChatRepo: createChat(memberIds, true)
ChatRepo -> FS: addDocument("chats", groupChatData)
FS --> ChatRepo: groupChatId

loop for each member
    GroupMgr -> UserRepo: getUserProfile(memberId)
    UserRepo -> FS: getDocument("users", memberId)
    FS --> UserRepo: UserProfile
    UserRepo --> GroupMgr: UserProfile
end

GroupMgr -> FS: updateDocument("chats", groupChatId, membersData)

GroupMgr -> FCM: sendNotificationToGroup(groupId, "Added to group")
FCM -> Members: Push Notification

FS -> Members: Real-time group creation update
Members -> Members: Add group to chat list

GroupMgr --> GroupVM: Success(groupChatId)
GroupVM --> GroupUI: Group created successfully
GroupUI -> GroupUI: navigateToChatFragment(groupChatId)

newpage Image Sharing Flow
title ChatZam App - Image Sharing Flow

participant "User" as User
participant "ChatFragment" as ChatUI
participant "MessageViewModel" as MsgVM
participant "MessageRepository" as MsgRepo
participant "FirebaseStorage" as Storage
participant "EncryptionService" as Encrypt
participant "Firestore" as FS
participant "Recipient" as Recipient

User -> ChatUI: Select image from gallery
ChatUI -> ChatUI: onImageSelected(imageUri)
ChatUI -> MsgVM: sendImageMessage(imageUri, chatId)
MsgVM -> MsgRepo: sendImageMessage(imageUri, chatId)

MsgRepo -> Storage: uploadImage(imageUri, fileName)
Storage --> MsgRepo: downloadUrl

MsgRepo -> Encrypt: encryptData(imageBytes, secretKey)
Encrypt --> MsgRepo: encryptedImageData

MsgRepo -> Storage: uploadEncryptedImage(encryptedData)
Storage --> MsgRepo: encryptedImageUrl

MsgRepo -> FS: addDocument("messages", imageMessageData)
FS --> MsgRepo: messageId

FS -> Recipient: Real-time message update
Recipient -> Storage: downloadEncryptedImage(encryptedImageUrl)
Storage --> Recipient: encryptedImageData
Recipient -> Encrypt: decryptData(encryptedImageData, secretKey)
Encrypt --> Recipient: originalImageBytes
Recipient -> Recipient: Display image in chat

MsgRepo -> FCM: sendNotificationToUser(recipientId, "Image message")
FCM -> Recipient: Push notification

MsgRepo --> MsgVM: Success
MsgVM --> ChatUI: Image sent confirmation

newpage Real-time Message Reception Flow
title ChatZam App - Real-time Message Reception Flow

participant "Firebase" as Firebase
participant "FCMService" as FCMService
participant "NotificationManager" as NotifyMgr
participant "MessageRepository" as MsgRepo
participant "EncryptionService" as Encrypt
participant "ChatFragment" as ChatUI
participant "User" as User

Firebase -> FCMService: onMessageReceived(remoteMessage)

alt App in Foreground
    FCMService -> MsgRepo: handleRealtimeMessage(messageData)
    MsgRepo -> Encrypt: decryptMessage(encryptedContent, privateKey)
    Encrypt --> MsgRepo: decryptedContent
    MsgRepo -> ChatUI: updateMessagesList(newMessage)
    ChatUI -> User: Display message immediately
else App in Background
    FCMService -> NotifyMgr: showMessageNotification(message, senderName)
    NotifyMgr -> User: Push notification displayed
    
    User -> NotifyMgr: Tap notification
    NotifyMgr -> ChatUI: openChatFragment(chatId)
    ChatUI -> MsgRepo: getMessages(chatId)
    MsgRepo -> Encrypt: decryptMessage(encryptedContent, privateKey)
    Encrypt --> MsgRepo: decryptedContent
    MsgRepo --> ChatUI: messagesList
    ChatUI -> User: Display chat with new message
end

newpage User Presence Updates Flow
title ChatZam App - User Presence Updates Flow

participant "MainActivity" as MainActivity
participant "PresenceManager" as Presence
participant "Firebase Realtime DB" as RealtimeDB
participant "Firestore" as FS
participant "Other Users" as OtherUsers

MainActivity -> Presence: setupPresenceListener(currentUserId)

loop App Lifecycle Events
    alt onResume
        MainActivity -> Presence: updateUserPresence(userId, true)
        Presence -> RealtimeDB: setPresence(userId, "online", timestamp)
        Presence -> FS: updateDocument("users", userId, onlineStatus)
    else onPause
        MainActivity -> Presence: updateUserPresence(userId, false)
        Presence -> RealtimeDB: setPresence(userId, "offline", timestamp)
        Presence -> FS: updateDocument("users", userId, offlineStatus)
    end
    
    RealtimeDB -> OtherUsers: Real-time presence update
    OtherUsers -> OtherUsers: Update UI presence indicators
end

@enduml